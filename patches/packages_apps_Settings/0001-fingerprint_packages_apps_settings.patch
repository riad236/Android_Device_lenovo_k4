commit c2052c24e20efd3b46fbcdf3d9c7c328213fe59a
Author: Jan Engelmohr <jan.engelmohr@mailbox.tu-dresden.de>
Date:   Mon Mar 28 16:23:12 2016 +0200

    first silead fingerprint patch
    
    Change-Id: If791976ac1176485a02f83210d6fe4295ade03b3

diff --git a/src/com/android/settings/ChooseLockGeneric.java b/src/com/android/settings/ChooseLockGeneric.java
index 5236abc..f77991d 100644
--- a/src/com/android/settings/ChooseLockGeneric.java
+++ b/src/com/android/settings/ChooseLockGeneric.java
@@ -1,4 +1,9 @@
 /*
+* Copyright (C) 2014 MediaTek Inc.
+* Modification based on code covered by the mentioned copyright
+* and/or permission notice(s).
+*/
+/*
  * Copyright (C) 2010 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -48,6 +53,10 @@ import android.view.accessibility.AccessibilityManager;
 import android.widget.ListView;
 import android.widget.TextView;
 
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:21:11 +0800
+ */
+import android.widget.Toast;
+// End of Vanzo:hanshengpeng
 import com.android.internal.widget.LockPatternUtils;
 import com.android.settings.notification.RedactionInterstitial;
 
@@ -56,6 +65,12 @@ import java.util.List;
 public class ChooseLockGeneric extends SettingsActivity {
     public static final String CONFIRM_CREDENTIALS = "confirm_credentials";
 
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:21:36 +0800
+ * fingerprint add by sileadinc
+ */
+    public static final String CONFIRM_FP = "confirm_fp";
+    public static boolean mSupportSileadincFp = true;
+// End of Vanzo:hanshengpeng
     @Override
     public Intent getIntent() {
         Intent modIntent = new Intent(super.getIntent());
@@ -92,6 +107,12 @@ public class ChooseLockGeneric extends SettingsActivity {
         private static final int ENABLE_ENCRYPTION_REQUEST = 102;
         private static final String PASSWORD_CONFIRMED = "password_confirmed";
 
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:22:21 +0800
+ * fingerprint add by sileadinc
+ */
+        private static final int FALLBACK_REQUEST_FP = 103;
+        private static final int ENABLE_ENCRYPTION_REQUEST_FP = 104;
+// End of Vanzo:hanshengpeng
         private static final String WAITING_FOR_CONFIRMATION = "waiting_for_confirmation";
         private static final String FINISH_PENDING = "finish_pending";
         private static final String TAG = "ChooseLockGenericFragment";
@@ -180,6 +201,27 @@ public class ChooseLockGeneric extends SettingsActivity {
             }
         }
 
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:23:01 +0800
+ * fingerprint add by sileadinc
+ */
+        private void maybeEnableEncryptionFP(int quality, boolean disabled) {
+            if (Process.myUserHandle().isOwner() && LockPatternUtils.isDeviceEncryptionEnabled()) {
+                mEncryptionRequestQuality = quality;
+                mEncryptionRequestDisabled = disabled;
+                // If accessibility is enabled and the user hasn't seen this dialog before, set the
+                // default state to agree with that which is compatible with accessibility
+                // (password not required).
+                final boolean accEn = AccessibilityManager.getInstance(getActivity()).isEnabled();
+                final boolean required = mLockPatternUtils.isCredentialRequiredToDecrypt(!accEn);
+                Intent intent = EncryptionInterstitial.createStartIntent(
+                        getActivity(), quality, required);
+                startActivityForResult(intent, ENABLE_ENCRYPTION_REQUEST_FP);
+            } else {
+                mRequirePassword = false; // device encryption not enabled or not device owner.
+                setFingerPrintUnlockMethodAndFinish(quality, disabled);
+            }
+        }
+// End of Vanzo:hanshengpeng
         /**
          * If the device has encryption already enabled, then ask the user if they
          * also want to encrypt the phone with this password.
@@ -238,6 +280,15 @@ public class ChooseLockGeneric extends SettingsActivity {
             return v;
         }
 
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:28:49 +0800
+ * fingerprint add by sileadinc
+ */
+        void startFingerPrint(){
+            Intent intent = new Intent();
+            intent.setClassName("com.silead.fp", "com.silead.fp.MainActivity");
+            startActivity(intent);
+        }
+// End of Vanzo:hanshengpeng
         @Override
         public void onActivityResult(int requestCode, int resultCode, Intent data) {
             super.onActivityResult(requestCode, resultCode, data);
@@ -249,12 +300,29 @@ public class ChooseLockGeneric extends SettingsActivity {
                 mChooseLockSettingsHelper.utils().deleteTempGallery();
                 getActivity().setResult(resultCode);
                 finish();
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:29:13 +0800
+ * fingerprint add by sileadinc
+ */
+            } else if(requestCode == FALLBACK_REQUEST_FP
+                    && resultCode == Activity.RESULT_OK){
+                startFingerPrint();
+                finish();
+// End of Vanzo:hanshengpeng
             } else if (requestCode == ENABLE_ENCRYPTION_REQUEST
                     && resultCode == Activity.RESULT_OK) {
                 mRequirePassword = data.getBooleanExtra(
                         EncryptionInterstitial.EXTRA_REQUIRE_PASSWORD, true);
                 updateUnlockMethodAndFinish(mEncryptionRequestQuality, mEncryptionRequestDisabled,
                         mEncryptionRequestSubQuality);
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:29:43 +0800
+ * fingerprint add by sileadinc
+ */
+            } else if(requestCode == ENABLE_ENCRYPTION_REQUEST_FP
+                    && resultCode == Activity.RESULT_OK){
+                mRequirePassword = data.getBooleanExtra(
+                        EncryptionInterstitial.EXTRA_REQUIRE_PASSWORD, true);
+                setFingerPrintUnlockMethodAndFinish(mEncryptionRequestQuality, mEncryptionRequestDisabled);
+// End of Vanzo:hanshengpeng
             } else {
                 getActivity().setResult(Activity.RESULT_CANCELED);
                 finish();
@@ -374,10 +442,13 @@ public class ChooseLockGeneric extends SettingsActivity {
                         enabled = quality <= DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX;
                     } else if (KEY_UNLOCK_SET_PASSWORD.equals(key)) {
                         enabled = quality <= DevicePolicyManager.PASSWORD_QUALITY_COMPLEX;
-                    } else if (KEY_UNLOCK_SET_FINGERPRINT.equals(key)) {
-                        enabled = quality <= DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK ||
-                                allowBiometric.value;
-                        visible = fingerprintAvailable; // If not available, then don't show it.
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:30:04 +0800
+ * fingerprint add by sileadinc
+ */
+                    } else if(KEY_UNLOCK_SET_FINGERPRINT.equals(key)){
+                        enabled = quality <= DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX;
+                        visible = mSupportSileadincFp;
+// End of Vanzo:hanshengpeng
                     }
                     if (hideDisabled) {
                         visible = visible && enabled;
@@ -427,6 +498,11 @@ public class ChooseLockGeneric extends SettingsActivity {
          */
         private boolean allowedForFallback(String key) {
             return KEY_UNLOCK_BACKUP_INFO.equals(key)  ||
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:30:22 +0800
+ * fingerprint add by sileadinc
+ */
+                    KEY_UNLOCK_SET_FINGERPRINT.equals(key)  ||
+// End of Vanzo:hanshengpeng
                     KEY_UNLOCK_SET_PATTERN.equals(key) ||
                     KEY_UNLOCK_SET_PIN.equals(key) ||
                     KEY_UNLOCK_SET_PASSWORD.equals(key);
@@ -458,6 +534,43 @@ public class ChooseLockGeneric extends SettingsActivity {
                     requirePassword, confirmCredentials);
         }
 
+
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:30:43 +0800
+ * fingerprint add by sileadinc
+ */
+        void setFingerPrintUnlockMethodAndFinish(int quality, boolean disabled) {
+            // Sanity check. We should never get here without confirming user's existing password.
+            if (!mPasswordConfirmed) {
+                throw new IllegalStateException("Tried to update password without confirming it");
+            }
+            LockPatternUtils mLockPatternUtils = new LockPatternUtils(getActivity());
+            int quality_lock = mLockPatternUtils.getKeyguardStoredPasswordQuality();
+
+            if(quality_lock==DevicePolicyManager.PASSWORD_QUALITY_NUMERIC
+                    || quality_lock == DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC){
+                startFingerPrint();
+                finish();
+                return;
+            }
+            final boolean isFallback = getActivity().getIntent()
+                .getBooleanExtra(LockPatternUtils.LOCKSCREEN_BIOMETRIC_WEAK_FALLBACK, false);
+            quality = upgradeQuality(quality, null);
+            if (quality >= DevicePolicyManager.PASSWORD_QUALITY_NUMERIC) {
+                int minLength = mDPM.getPasswordMinimumLength(null);
+                if (minLength < MIN_PASSWORD_LENGTH) {
+                    minLength = MIN_PASSWORD_LENGTH;
+                }
+
+                final int maxLength = mDPM.getPasswordMaximumLength(quality);
+                Intent intent = ChooseLockPassword.createIntent(((Context)getActivity()), quality, isFallback, true, 
+                        minLength, maxLength, mRequirePassword, false /* confirm credentials */);
+                intent.putExtra(CONFIRM_FP, true);
+                startActivityForResult(intent, FALLBACK_REQUEST_FP);
+                return;
+            }
+            finish();
+        }
+// End of Vanzo:hanshengpeng
         protected Intent getLockPasswordIntent(Context context, int quality,
                 final boolean isFallback, boolean isFingerprintFallback,
                 int minLength, final int maxLength,
@@ -556,6 +669,14 @@ public class ChooseLockGeneric extends SettingsActivity {
                 Intent intent = getBiometricSensorIntent();
                 mFinishPending = true;
                 startActivity(intent);
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:31:04 +0800
+ * fingerprint add by sileadinc
+ */
+                if (mSupportSileadincFp) {
+                    Toast.makeText(getActivity(), "Fingerprint unlock is now disabled.", Toast.LENGTH_LONG).show();
+                    getActivity().sendBroadcast(new  Intent("com.silead.fp.Settings.NONSUPPORT_LOCKSCREEN_ACTIVE"));
+                }
+// End of Vanzo:hanshengpeng
             } else if (quality == DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED) {
                 mChooseLockSettingsHelper.utils().clearLock(false);
                 mChooseLockSettingsHelper.utils().setLockScreenDisabled(disabled);
@@ -574,6 +695,14 @@ public class ChooseLockGeneric extends SettingsActivity {
                     }
                 }
                 getActivity().setResult(Activity.RESULT_OK);
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:31:15 +0800
+ * fingerprint add by sileadinc
+ */
+                if (mSupportSileadincFp) {
+                    Toast.makeText(getActivity(), "Fingerprint unlock is now disabled.", Toast.LENGTH_LONG).show();
+                    getActivity().sendBroadcast(new  Intent("com.silead.fp.Settings.NONSUPPORT_LOCKSCREEN_ACTIVE"));
+                }
+// End of Vanzo:hanshengpeng
                 finish();
             } else {
                 finish();
@@ -626,12 +755,36 @@ public class ChooseLockGeneric extends SettingsActivity {
             EventLog.writeEvent(EventLogTags.LOCK_SCREEN_TYPE, unlockMethod);
 
             if (KEY_UNLOCK_SET_OFF.equals(unlockMethod)) {
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:31:26 +0800
+ * fingerprint add by sileadinc
+ */
+                if (mSupportSileadincFp) {
+                    Toast.makeText(getActivity(), "Fingerprint unlock is now disabled.", Toast.LENGTH_LONG).show();
+                    getActivity().sendBroadcast(new  Intent("com.silead.fp.Settings.NONSUPPORT_LOCKSCREEN_ACTIVE"));
+                }
+// End of Vanzo:hanshengpeng
                 updateUnlockMethodAndFinish(
                         DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED, true /* disabled */ );
             } else if (KEY_UNLOCK_SET_NONE.equals(unlockMethod)) {
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:31:38 +0800
+ * fingerprint add by sileadinc
+ */
+                if (mSupportSileadincFp) {
+                    Toast.makeText(getActivity(), "Fingerprint unlock is now disabled.", Toast.LENGTH_LONG).show();
+                    getActivity().sendBroadcast(new  Intent("com.silead.fp.Settings.NONSUPPORT_LOCKSCREEN_ACTIVE"));
+                }
+// End of Vanzo:hanshengpeng
                 updateUnlockMethodAndFinish(
                         DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED, false /* disabled */ );
             } else if (KEY_UNLOCK_SET_BIOMETRIC_WEAK.equals(unlockMethod)) {
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:31:38 +0800
+ * fingerprint add by sileadinc
+ */
+                if (mSupportSileadincFp) {
+                    Toast.makeText(getActivity(), "Fingerprint unlock is now disabled.", Toast.LENGTH_LONG).show();
+                    getActivity().sendBroadcast(new  Intent("com.silead.fp.Settings.NONSUPPORT_LOCKSCREEN_ACTIVE"));
+                }
+// End of Vanzo:hanshengpeng
                 maybeEnableEncryption(
                         DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK, false);
             } else if (KEY_UNLOCK_SET_PATTERN.equals(unlockMethod)) {
@@ -640,6 +793,13 @@ public class ChooseLockGeneric extends SettingsActivity {
             } else if (KEY_UNLOCK_SET_PIN.equals(unlockMethod)) {
                 maybeEnableEncryption(
                         DevicePolicyManager.PASSWORD_QUALITY_NUMERIC, false);
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:31:38 +0800
+ * fingerprint add by sileadinc
+ */
+            } else if (KEY_UNLOCK_SET_FINGERPRINT.equals(unlockMethod)) {
+                maybeEnableEncryptionFP(
+                        DevicePolicyManager.PASSWORD_QUALITY_NUMERIC, false);
+// End of Vanzo:hanshengpeng
             } else if (KEY_UNLOCK_SET_PASSWORD.equals(unlockMethod)) {
                 maybeEnableEncryption(
                         DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC, false);
diff --git a/src/com/android/settings/ChooseLockPassword.java b/src/com/android/settings/ChooseLockPassword.java
index bdd50fc..7768791 100644
--- a/src/com/android/settings/ChooseLockPassword.java
+++ b/src/com/android/settings/ChooseLockPassword.java
@@ -1,4 +1,9 @@
 /*
+* Copyright (C) 2014 MediaTek Inc.
+* Modification based on code covered by the mentioned copyright
+* and/or permission notice(s).
+*/
+/*
  * Copyright (C) 2010 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -445,6 +450,22 @@ public class ChooseLockPassword extends SettingsActivity {
                     mLockPatternUtils.setCredentialRequiredToDecrypt(required);
                     mLockPatternUtils.saveLockPassword(pin, mRequestedQuality, isFallback,
                             isFingerprintFallback);
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:37:51 +0800
+ * fingerprint add by sileadinc
+ */
+                        if(getActivity().getIntent()!=null&&
+                                getActivity().getIntent().getBooleanExtra(ChooseLockGeneric.CONFIRM_FP, false)){
+                            getActivity().setResult(Activity.RESULT_OK);
+                            getActivity().finish();
+                            mDone = true;
+                        }else{
+                            getActivity().setResult(RESULT_FINISHED);
+                            getActivity().finish();
+                            mDone = true;
+                            startActivity(RedactionInterstitial.createStartIntent(getActivity()));
+                        }
+                    
+// End of Vanzo:hanshengpeng
                     getActivity().setResult(RESULT_FINISHED);
                     getActivity().finish();
                     mDone = true;
diff --git a/src/com/android/settings/ChooseLockPattern.java b/src/com/android/settings/ChooseLockPattern.java
index 60de8a7..c364dad 100644
--- a/src/com/android/settings/ChooseLockPattern.java
+++ b/src/com/android/settings/ChooseLockPattern.java
@@ -1,4 +1,9 @@
 /*
+* Copyright (C) 2014 MediaTek Inc.
+* Modification based on code covered by the mentioned copyright
+* and/or permission notice(s).
+*/
+/*
  * Copyright (C) 2007 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -40,6 +45,10 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:38:52 +0800
+ */
+import android.widget.Toast;
+// End of Vanzo:hanshengpeng
 /**
  * If the user has a lock pattern set already, makes them confirm the existing one.
  *
@@ -589,6 +598,13 @@ public class ChooseLockPattern extends SettingsActivity {
             if (lockVirgin) {
                 utils.setVisiblePatternEnabled(true);
             }
+/* Vanzo:hanshengpeng on: Thu, 21 May 2015 16:38:59 +0800
+ * fingerprint add by sileadinc
+ */
+               Toast.makeText(getActivity(), "Fingerprint unlock is now disabled.", Toast.LENGTH_LONG).show();
+                getActivity().sendBroadcast(new  Intent("com.silead.fp.Settings.NONSUPPORT_LOCKSCREEN_ACTIVE"));
+            
+// End of Vanzo:hanshengpeng
 
             if (!wasSecureBefore) {
                 startActivity(getRedactionInterstitialIntent(getActivity()));
